export default {"href":"/techniques/non-functional-requirements","html":" \n    <h1>Non-Functional Requirements</h1>\n    <section>\n\t\t<h2>Introduction</h2>\n\t\t<p>Non-functional requirements (NFRs) are often overlooked or given less importance compared to functional requirements (FRs) in software development projects. NFRs are requirements that describe how the system should behave, whereas FRs are requirements that describe what the system should do. However, it's important to note that NFRs are always functional requirements to a user somewhere, as they have a direct impact on the user's experience of the system.</p>\n\t</section>\n\n\t<section>\n\t\t<h2>Examples</h2>\n\t\t<p>Let's consider some examples to illustrate how NFRs are always functional requirements:</p>\n\n\t\t<ul>\n\t\t\t<li><strong>Performance:</strong> An NFR such as \"the system should respond within 2 seconds\" is a functional requirement to a user who needs to complete a task quickly and efficiently.</li>\n\t\t\t<li><strong>Security:</strong> An NFR such as \"the system should encrypt all sensitive data\" is a functional requirement to a user who needs to ensure that their data is protected from unauthorized access.</li>\n\t\t\t<li><strong>Usability:</strong> An NFR such as \"the system should be easy to navigate\" is a functional requirement to a user who needs to quickly find and use specific features of the system.</li>\n\t\t\t<li><strong>Maintainability:</strong> An NFR such as \"the system should be easy to maintain\" is a functional requirement to a user who needs to ensure that the system can be easily updated and fixed.</li>\n\t\t</ul>\n\n\t\t<p>As you can see, NFRs are always functional requirements to a user somewhere, and therefore should not be overlooked or given less importance compared to FRs.</p>\n\t</section>\n\n  <section>\n  <h2>Identifying the \"Users\" of Non-Functional Requirements</h2>\n\t<p>Non-functional requirements (NFRs) are often thought of as technical requirements that don't directly impact the end user. However, every NFR has a user or set of users who are impacted by it in some way. Here are some tips for identifying the \"users\" of NFRs:</p>\n  <ol>\n  <li><strong>End users:</strong> The end users of a software product are often the most obvious users of non-functional requirements. For example, a user might expect a website to load quickly, be accessible on a variety of devices, and be secure enough to protect their personal information.</li>\n  <li><strong>Developers:</strong> Developers are also users of non-functional requirements as they need to understand how the software should perform in different scenarios. For example, they might need to know how many concurrent users the system should be able to support or how quickly it should respond to user input.</li>\n  <li><strong>Project stakeholders:</strong> Project stakeholders, such as project managers, product owners, or business analysts, may also have specific non-functional requirements that are important to them. For example, a project manager might need to ensure that the software complies with certain regulations or industry standards.</li>\n  <li><strong>IT operations teams:</strong> Non-functional requirements can also be important for IT operations teams, who need to ensure that the software can be deployed, configured, and maintained properly. For example, they might need to know what kind of hardware or software infrastructure is required to support the application.</li>\n  <li><strong>Third-party providers:</strong> Third-party providers, such as hosting providers or payment processors, may also have specific non-functional requirements that need to be met. For example, a payment processor might require that the software be secure and compliant with certain payment processing regulations.</li>\n</ol>\n\t<p>By identifying the \"users\" of non-functional requirements, you can ensure that these requirements are appropriately prioritized and addressed in the software development process.</p>\n  </section>\n\n  <div>\n  <h2>Common Traps Business Analysts Fall Into When Thinking About NFRs</h2>\n  <ul>\n    <li><strong>Overemphasis on technical aspects:</strong> Business analysts may get too focused on technical aspects of non-functional requirements and forget about the real-world impacts these requirements have on end users. For example, they may prioritize system performance over usability, resulting in a slow or difficult-to-use system.</li>\n    <li><strong>Not considering the user experience:</strong> It's important to remember that non-functional requirements can have a significant impact on the user experience. Business analysts may overlook this and prioritize other aspects of the system, resulting in a product that fails to meet user needs.</li>\n    <li><strong>Assuming that NFRs are absolute:</strong> Business analysts may assume that non-functional requirements are absolute and fail to consider trade-offs or alternative solutions. For example, they may prioritize security over usability, resulting in a system that is difficult for users to access or navigate.</li>\n    <li><strong>Ignoring stakeholder input:</strong> Business analysts may overlook the input of stakeholders, including end users, when prioritizing non-functional requirements. This can result in a product that does not meet the needs or expectations of its users.</li>\n  </ul>\n</div>\n<div>\n  <h2>The Importance of Considering the User in NFRs</h2>\n  <p>When it comes to non-functional requirements, it's important to remember that they ultimately impact the user experience. Business analysts must take a holistic approach and consider the impact of non-functional requirements on the end user, rather than focusing solely on technical aspects. By considering the user experience, business analysts can ensure that non-functional requirements are prioritized appropriately and the end product meets the needs of its users.</p>\n\n  <p>It's important to note that when we talk about \"end users\" in the context of non-functional requirements, we're not just referring to the people who use the system in its final state. In fact, \"end users\" can include anyone who interacts with the system at any point in the process. This might include engineers who work on the system, IT staff who maintain it, or even other software applications that interact with it. By considering all of the different users and stakeholders who interact with the system, we can get a more complete picture of the non-functional requirements that need to be met in order for the system to be successful.</p>\n\n  <p>Imagine an engineer who works on a software system that's responsible for processing large amounts of data. One night, they're woken up at 2am by an alert that the server is overloaded and needs immediate attention. They spend several hours performing maintenance work to get the system back up and running. Upon investigation, they discover that the system wasn't designed with their needs in mind - there were no non-functional requirements in place to ensure that the system could handle large spikes in data volume. As a result, the engineer had to spend time fixing the system instead of getting a good night's sleep, which ultimately impacted their productivity and well-being.</p> \n<p>This is just one example of how overlooking the non-functional requirements of a system can have real-world impacts on the people who interact with it. By taking the time to identify and consider all of the different types of users and stakeholders, including engineers and IT staff, we can ensure that the system meets the needs of everyone involved and avoid costly and disruptive incidents like the one described above.</p>\n\n<p>\nIn the example given, an engineer losing a good night's sleep due to a server overload may not seem like a major issue, but in certain contexts, overlooking the users' requirements can lead to disastrous consequences. For instance, in safety-critical environments such as medical or industrial applications, neglecting non-functional requirements and failing to consider the users' needs can result in severe harm or even loss of life. Therefore, it is crucial to ensure that all users, including engineers, IT staff, and end-users, are considered when defining non-functional requirements, and their needs are incorporated into the development process to mitigate potential risks.\n</p>\n</div>\n\n\t<section>\n\t\t<h2>Conclusion</h2>\n\t\t<p>Non-functional requirements are often overlooked or given less importance compared to functional requirements in software development projects. However, it's important to remember that NFRs are always functional requirements to a user somewhere, as they have a direct impact on the user's experience of the system. Therefore, it's crucial to consider both FRs and NFRs when developing software to ensure that the system meets the needs and expectations of its users.</p>\n\t</section>\n    \n    ","displayShareLinks":true};