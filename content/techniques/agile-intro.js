export default {"href":"/techniques/agile-intro","html":"<div>\n    <h1>An Introduction to Agile</h1>\n \n    <h2>What is Agile?</h2>\n\n    <p><span >Agile refers to the capacity to adapt and react to change,\n            particularly in unpredictable and turbulent settings. The originators of the Agile Manifesto selected the\n            term \"Agile\" to signify the flexibility and ability to respond to change that underpins their\n            methodology.</span></p>\n\n    <p><span >The crux of Agile is analyzing the current environmental\n            circumstances, identifying any uncertainties, and devising strategies to adjust to them as they\n            emerge.</span></p>\n\n    <h2><strong >What is Agile Software Development?</strong></h2>\n\n    <p><span >Agile Software Development goes beyond just utilizing frameworks\n            like Scrum, Extreme Programming, or Feature-Driven Development (FDD) and practices like pair programming,\n            test-driven development, stand-ups, planning sessions, and sprints.</span></p>\n\n    <p><span >It's a broad term that encompasses a collection of frameworks and\n            practices rooted in the values and principles outlined in the Manifesto for Agile Software Development and\n            its accompanying 12 Principles.&nbsp;</span></p>\n\n    <p><span >Embracing these values and principles and tailoring them to your\n            specific circumstances can help guide your software development approach.</span></p>\n\n    <p><span >What sets Agile apart from other development methods is its emphasis\n            on the individuals involved in the process and how they collaborate.&nbsp;</span></p>\n\n    <p><span >Effective solutions emerge from self-organizing cross-functional\n            teams using the appropriate practices for their context. Collaboration and self-organization are critical\n            components of the Agile software development community's philosophy.</span></p>\n\n    <p><span >The presence of managers in Agile development teams does not\n            contradict the idea of self-organization. Rather, it means that teams have the autonomy to decide how they\n            will approach tasks.</span></p>\n\n    <p><span >Cross-functional teams are a hallmark of Agile development, with\n            team members possessing a broad range of skills. Managers play a crucial role in ensuring that the team has\n            access to the necessary skills and fostering an environment conducive to success. They typically step back\n            and let the team determine how to deliver products but intervene when needed to resolve issues.</span></p>\n\n    <p><span >When organizations begin implementing Agile development, they tend\n            to focus on collaborative and organizational practices, which is commendable. However, they often overlook a\n            crucial set of technical practices that deal directly with software development and help teams deal with\n            uncertainty. Neglecting these practices is ill-advised, as they are critical to success.</span></p>\n\n    <h2><strong >A Brief Account of the Emergence and Evolution of Agile</strong>\n    </h2>\n\n    <p><span >To comprehend the current state of Agile software development, it is\n            crucial to delve into its roots and trace its path towards being labeled as Agile. Thus, let's take a\n            glimpse into how Agile originated and evolved over time.</span></p>\n\n    <p><span >At its core, Agile is a mindset that is shaped by the values and\n            principles espoused in the Agile Manifesto. These principles and values serve as a framework for navigating\n            change and dealing with uncertainty effectively.</span></p>\n\n    <p><span >The first sentence of the Agile Manifesto succinctly captures the\n            essence of the concept: \"We are discovering better ways of developing software by doing it and helping\n            others do it.\"</span></p>\n\n    <p><span >When confronted with uncertainty, one should try a potential\n            solution, obtain feedback, and make necessary adjustments, all while keeping the values and principles in\n            mind.</span></p>\n\n    <p><span >As you collaborate with your team and strive to deliver value to\n            your customers, let your circumstances determine which frameworks, practices, and techniques to\n            employ.</span></p>\n\n    <h2><strong >Defining Agile Methodologies</strong></h2>\n\n    <p><span >Given that Agile is a mindset, it begs the question of what Agile\n            methodologies actually entail. To answer this, we first need to establish a clear definition of\n            methodology.</span></p>\n\n    <p><span >Each team will have its own unique methodology that may differ in\n            varying degrees from those of other teams. Thus, Agile methodologies refer to the conventions that a team\n            chooses to adopt in a manner that aligns with Agile values and principles.</span></p>\n\n    <p><span >However, you might be wondering, \"Isn't Scrum or XP considered an\n            Agile methodology?\" While they may have originated from a single team's methodology, they evolved into\n            frameworks when generalized for use by other teams. These frameworks serve as starting points for a team's\n            methodology, but they should not define it. The team must always adapt its use of a framework to suit its\n            specific context.</span></p>\n\n    <p><strong >Exploring Agile in Project Management and Business\n            Analysis</strong></p>\n\n    <p><span >As Agile Software Development gained traction, non-developers\n            involved in software development sought to apply Agile concepts to their respective fields of work.</span>\n    </p>\n\n    <p><span >The Agile Manifesto and its 12 Principles were crafted by a group of\n            software developers (and a tester) to address issues specific to their field. However, since Agile is a\n            mindset, it can be adapted for use in other activities.</span></p>\n\n    <p><span >Some possible examples of how Agile can be applied to\n            different industry sectors are:</span></p>\n\n    <ul>\n        <li><span >In education, teachers can use Agile methods to design and\n                deliver lessons that are responsive to students’ needs and feedback. They can also collaborate with\n                other educators and stakeholders to share best practices and improve learning outcomes.</span></li>\n        <li><span >In marketing, teams can use Agile frameworks to plan and\n                execute campaigns that are aligned with customer expectations and business goals. They can also test and\n                iterate on their strategies based on data and feedback from the market.</span></li>\n        <li><span >In manufacturing, companies can use Agile principles to\n                optimize their production processes and reduce waste. They can also involve customers and suppliers in\n                the product development</span></li>\n    </ul>\n\n\n\n    <h2><strong>Some Core Agile Concepts explained in brief</strong></h2>\n\n    <p><strong >User Stories:&nbsp;</strong></p>\n\n    <p><span >A user story is a short and simple\n            description of a feature or functionality that a user wants or needs from the product. It usually follows\n            the format of “As a &lt;type of user&gt;, I want &lt;some goal&gt; so that &lt;some reason&gt;.” For\n            example, “As a customer, I want to log in with my email and password so that I can access my account.” User\n            stories help the team to understand the customer’s perspective and prioritize the work that delivers the\n            most value. They also provide a common language for communication and collaboration between the team and the\n            customer or product owner. User stories are typically written on index cards or sticky notes and arranged on\n            a board or wall to track the progress of the project.</span></p>\n\n    <p><strong >‘Stand Ups’:</strong></p>\n\n    <p><span >A daily meeting (commonly known as a ‘stand\n            up’)&nbsp; is a short and focused meeting that the team holds every day to synchronize their work and plan\n            for the next 24 hours. It usually lasts no more than 15 minutes and follows a simple agenda. Each team\n            member answers three questions:</span></p>\n    <ul>\n        <li><span >What did I do yesterday that helped the team meet the sprint\n                goal?</span></li>\n        <li><span >What will I do today to help the team meet the sprint\n                goal?</span></li>\n        <li><span >Do I see any impediment that prevents me or the team from\n                meeting the sprint goal?</span></li>\n    </ul>\n    <p><span >The daily meeting helps the team to stay on\n            track and identify any issues or risks that need to be addressed. It also fosters transparency and\n            accountability among the team members. The daily meeting is usually facilitated by the Scrum Master, who\n            ensures that the meeting is productive and respectful.</span></p>\n\n\n    <p><strong >Agile Teams</strong></p>\n\n    <p><span >A team is the core unit of an Agile project\n            or effort. It consists of a small number of people, usually between 3 and 9, who work together closely and\n            collaboratively to deliver value to the customer. The team members have different skills and roles, but they\n            share the same vision and commitment. They are also self-organizing and empowered to make decisions about\n            how to best accomplish their work.</span></p>\n    <p><span >A team is more than just a group of\n            individuals. It is a dynamic and cohesive entity that leverages the collective intelligence and creativity\n            of its members. A team is also constantly learning and improving through feedback and\n            reflection.&nbsp;</span></p>\n\n\n    <p><strong >Incremental Development:&nbsp;</strong></p>\n\n    <p><span >An incremental development strategy is a way\n            of building a product or service by adding new features or functionality in small and frequent steps. Each\n            step results in a working and valuable version of the product that can be delivered to the customer or\n            tested by the users. This strategy allows the team to get early and continuous feedback and to adapt to\n            changing requirements or market conditions.</span></p>\n    <p><span >Agile teams prefer this strategy over a\n            traditional waterfall approach, where the product is developed in a linear and sequential manner and\n            delivered only at the end of the project. An incremental development strategy enables the team to deliver\n            value faster and more frequently, to reduce risk and uncertainty, and to improve quality and customer\n            satisfaction.</span></p>\n\n    <p><strong >Iterative Development:&nbsp;</strong></p>\n\n    <p><span >An iterative project is a project that is\n            divided into smaller and shorter cycles of work, called iterations or sprints. Each iteration involves\n            performing the same software development activities, such as analysis, design, coding, testing, and\n            deployment, but on a different subset of the product’s features or functionality. Each iteration results in\n            a working and testable version of the product that can be reviewed and evaluated by the customer or the\n            users.</span></p>\n    <p><span >Agile projects use this approach instead of\n            a one-time or big-bang delivery of the product. An iterative project allows the team to incorporate feedback\n            and learning from each iteration and to make changes or improvements to the product or the process. An\n            iterative project also enables the team to cope with changing requirements or priorities and to deliver\n            value incrementally and continuously.</span></p>\n\n\n\n\n</div>","displayShareLinks":true};